# Task Management API Documentation

## Base URL
```
http://localhost:8000/api
```

## Authentication

### Login
```http
POST /login
```
**Request Body:**
```json
{
    "email": "user@example.com",
    "password": "password123"
}
```
**Response (200):**
```json
{
    "token": "your_access_token",
    "user": {
        "id": 1,
        "name": "John Doe",
        "email": "user@example.com",
        "role": "user"
    }
}
```

### Register
```http
POST /register
```
**Request Body:**
```json
{
    "name": "John Doe",
    "email": "user@example.com",
    "password": "password123",
    "password_confirmation": "password123"
}
```
**Response (201):**
```json
{
    "message": "User registered successfully",
    "user": {
        "id": 1,
        "name": "John Doe",
        "email": "user@example.com"
    }
}
```

## Tasks

All task endpoints require authentication. Include the bearer token in the Authorization header:
```
Authorization: Bearer your_access_token
```

### Get All Tasks
```http
GET /tasks
```
**Query Parameters:**
- `status` (optional): Filter by status (pending, completed)
- `priority` (optional): Filter by priority (low, medium, high)

**Response (200):**
```json
[
    {
        "id": 1,
        "title": "Task Title",
        "description": "Task Description",
        "status": "pending",
        "priority": "high",
        "user_id": 1,
        "created_at": "2025-08-16T10:00:00.000000Z",
        "updated_at": "2025-08-16T10:00:00.000000Z"
    }
]
```

### Create Task
```http
POST /tasks
```
**Request Body:**
```json
{
    "title": "New Task",
    "description": "Task Description",
    "priority": "high",
    "status": "pending"
}
```
**Response (201):**
```json
{
    "id": 1,
    "title": "New Task",
    "description": "Task Description",
    "status": "pending",
    "priority": "high",
    "user_id": 1,
    "created_at": "2025-08-16T10:00:00.000000Z",
    "updated_at": "2025-08-16T10:00:00.000000Z"
}
```

### Update Task
```http
PUT /tasks/{task_id}
```
**Request Body:**
```json
{
    "status": "completed",
    "priority": "low"
}
```
**Response (200):**
```json
{
    "message": "Task updated successfully",
    "task": {
        "id": 1,
        "status": "completed",
        "priority": "low"
    }
}
```

### Delete Task
```http
DELETE /tasks/{task_id}
```
**Response (200):**
```json
{
    "message": "Task deleted successfully"
}
```

## Admin Endpoints

These endpoints require admin role access.

### Get User Statistics
```http
GET /admin/user-statistics
```
**Query Parameters:**
- `page` (optional): Page number for pagination
- `per_page` (optional): Items per page (default: 10)

**Response (200):**
```json
{
    "data": [
        {
            "id": 1,
            "name": "User Name",
            "email": "user@example.com",
            "taskStats": {
                "total": 10,
                "completed": 5,
                "pending": 5,
                "highPriority": 3
            }
        }
    ],
    "total": 20,
    "per_page": 10,
    "current_page": 1,
    "last_page": 2
}
```

### Get User Tasks
```http
GET /admin/users/{user_id}/tasks
```
**Response (200):**
```json
{
    "data": [
        {
            "id": 1,
            "title": "Task Title",
            "description": "Task Description",
            "status": "pending",
            "priority": "high",
            "created_at": "2025-08-16T10:00:00.000000Z"
        }
    ]
}
```

## Error Responses

### Unauthorized (401)
```json
{
    "message": "Unauthenticated"
}
```

### Forbidden (403)
```json
{
    "message": "This action is unauthorized"
}
```

### Validation Error (422)
```json
{
    "message": "The given data was invalid",
    "errors": {
        "field": [
            "Error message"
        ]
    }
}
```

## Rate Limiting

API requests are limited to 60 per minute per user.

## Additional Information

- All timestamps are returned in ISO 8601 format
- All requests must include the `Accept: application/json` header
- Request body must be sent as JSON with `Content-Type: application/json` header
